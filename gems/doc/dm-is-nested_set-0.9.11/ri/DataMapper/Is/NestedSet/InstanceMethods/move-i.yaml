--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: move self / node to a position in the set. position can <em>only</em> be changed through this
- !ruby/struct:SM::Flow::P 
  body: "@example [Usage]"
- !ruby/struct:SM::Flow::VERB 
  body: "  * node.move :higher           # moves node higher unless it is at the top of parent\n  * node.move :lower            # moves node lower unless it is at the bottom of parent\n  * node.move :below =&gt; other   # moves this node below other resource in the set\n  * node.move :into =&gt; other    # same as setting a parent-relationship\n"
- !ruby/struct:SM::Flow::P 
  body: "@param vector &lt;Symbol, Hash&gt; A symbol, or a key-value pair that describes the requested movement"
- !ruby/struct:SM::Flow::P 
  body: "@option :higher&lt;Symbol&gt; move node higher @option :highest&lt;Symbol&gt; move node to the top of the list (within its parent) @option :lower&lt;Symbol&gt; move node lower @option :lowest&lt;Symbol&gt; move node to the bottom of the list (within its parent) @option :indent&lt;Symbol&gt; move node into sibling above @option :outdent&lt;Symbol&gt; move node out below its current parent @option :into&lt;Resource&gt; move node into another node @option :above&lt;Resource&gt; move node above other node @option :below&lt;Resource&gt; move node below other node @option :to&lt;Integer&gt; move node to a specific location in the nested set"
- !ruby/struct:SM::Flow::P 
  body: "@return &lt;FalseClass&gt; returns false if it cannot move to the position, or if it is already there @raise &lt;RecursiveNestingError&gt; if node is asked to position itself into one of its descendants @raise &lt;UnableToPositionError&gt; if node is unable to calculate a new position for the element @see move_without_saving"
full_name: DataMapper::Is::NestedSet::InstanceMethods#move
is_singleton: false
name: move
params: (vector)
visibility: public
