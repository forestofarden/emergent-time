--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: In an application controller, call override! before a method to indicate that you want to override a method in Merb::Controller that is not normally overridable.
- !ruby/struct:SM::Flow::P 
  body: Doing this may potentially break your app in a future release of Merb, and this is provided for users who are willing to take that risk. Without using override!, Merb will raise an error if you attempt to override a method defined on Merb::Controller.
- !ruby/struct:SM::Flow::P 
  body: This is to help users avoid a common mistake of defining an action that overrides a core method on Merb::Controller.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Parameters
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*names<Array[Symbol]>:"
    body: An Array of methods that will override Merb core classes on purpose
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Example
- !ruby/struct:SM::Flow::VERB 
  body: "    class Kontroller &lt; Application\n      def status\n        render\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "will raise a Merb::ReservedError, because #status is a method on Merb::Controller."
- !ruby/struct:SM::Flow::VERB 
  body: "    class Kontroller &lt; Application\n      override! :status\n      def status\n        some_code || super\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: will not raise a Merb::ReservedError, because the user specifically decided to override the status method.
- !ruby/struct:SM::Flow::P 
  body: ":api: public"
full_name: Merb::Controller::override!
is_singleton: true
name: override!
params: (*names)
visibility: public
