--- !ruby/object:RI::MethodDescription 
aliases: 
- !ruby/object:RI::AliasName 
  name: ensure_authorized
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This is the main method to use as a before filter. You call it with a list of role names, which are checked in order. If the currently authenticated user has any role that implies one of the listed roles, the filter passes and the action proceeds. Otherwise the Forbidden exception will be raised.
- !ruby/struct:SM::Flow::P 
  body: Use the :message key in the options hash to pass in a failure message to the exception.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Example
- !ruby/struct:SM::Flow::VERB 
  body: "   class MyController &lt; Application\n     before :ensure_authorized, :with =&gt; [:foo_member, {:message =&gt; &quot;You need to be a privileged FOO MEMBER to see this page!&quot;}]\n      #... &lt;snip&gt;\n   end\n"
full_name: RepertoireCore::Mixins::AuthorizationHelper#require_role!
is_singleton: false
name: require_role!
params: (*args)
visibility: protected
