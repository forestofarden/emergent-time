--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Setup a controller to reference a slice and its template roots
- !ruby/struct:SM::Flow::P 
  body: This method is available to any class inheriting from Merb::AbstractController; it enabled correct location of templates, as well as access to the slice module.
- !ruby/struct:SM::Flow::P 
  body: "@param slice_module&lt;#to_s&gt; The slice module to use; defaults to current module. @param options&lt;Hash&gt;"
- !ruby/struct:SM::Flow::VERB 
  body: "  Optional parameters to set which component path is used (defaults to :view) and\n  the :path option lets you specify a subdirectory of that component path.\n  When :layout is set, then this is used instead of the config's :layout setting.\n"
- !ruby/struct:SM::Flow::P 
  body: "@example controller_for_slice # uses current module @example controller_for_slice SliceMod # defaults to :view templates and no subdirectory @example controller_for_slice :templates_for =&gt; :mailer, :path =&gt; 'views' # for Merb::Mailer @example controller_for_slice SliceMod, :templates_for =&gt; :mailer, :path =&gt; 'views' # for Merb::Mailer"
full_name: Merb::Slices::ControllerMixin::ClassMethods#controller_for_slice
is_singleton: false
name: controller_for_slice
params: (slice_module = nil, options = {})
visibility: public
